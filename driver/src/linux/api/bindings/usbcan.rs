/* automatically generated by rust-bindgen 0.69.4 */

pub const VCI_PCI5121: u32 = 1;
pub const VCI_PCI9810: u32 = 2;
pub const VCI_USBCAN1: u32 = 3;
pub const VCI_USBCAN2: u32 = 4;
pub const VCI_PCI9820: u32 = 5;
pub const VCI_CAN232: u32 = 6;
pub const VCI_PCI5110: u32 = 7;
pub const VCI_CANLite: u32 = 8;
pub const VCI_ISA9620: u32 = 9;
pub const VCI_ISA5420: u32 = 10;
pub const ERR_CAN_OVERFLOW: u32 = 1;
pub const ERR_CAN_ERRALARM: u32 = 2;
pub const ERR_CAN_PASSIVE: u32 = 4;
pub const ERR_CAN_LOSE: u32 = 8;
pub const ERR_CAN_BUSERR: u32 = 16;
pub const ERR_DEVICEOPENED: u32 = 256;
pub const ERR_DEVICEOPEN: u32 = 512;
pub const ERR_DEVICENOTOPEN: u32 = 1024;
pub const ERR_BUFFEROVERFLOW: u32 = 2048;
pub const ERR_DEVICENOTEXIST: u32 = 4096;
pub const ERR_LOADKERNELDLL: u32 = 8192;
pub const ERR_CMDFAILED: u32 = 16384;
pub const ERR_BUFFERCREATE: u32 = 32768;
pub const STATUS_OK: u32 = 1;
pub const STATUS_ERR: u32 = 0;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VCI_BOARD_INFO {
    pub hw_Version: ::core::ffi::c_ushort,
    pub fw_Version: ::core::ffi::c_ushort,
    pub dr_Version: ::core::ffi::c_ushort,
    pub in_Version: ::core::ffi::c_ushort,
    pub irq_Num: ::core::ffi::c_ushort,
    pub can_Num: ::core::ffi::c_uchar,
    pub str_Serial_Num: [::core::ffi::c_char; 20usize],
    pub str_hw_Type: [::core::ffi::c_char; 40usize],
    pub Reserved: [::core::ffi::c_ushort; 4usize],
}
impl Default for _VCI_BOARD_INFO {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VCI_BOARD_INFO = _VCI_BOARD_INFO;
pub type PVCI_BOARD_INFO = *mut _VCI_BOARD_INFO;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _VCI_CAN_OBJ {
    pub ID: ::core::ffi::c_uint,
    pub TimeStamp: ::core::ffi::c_uint,
    pub TimeFlag: ::core::ffi::c_uchar,
    pub SendType: ::core::ffi::c_uchar,
    pub RemoteFlag: ::core::ffi::c_uchar,
    pub ExternFlag: ::core::ffi::c_uchar,
    pub DataLen: ::core::ffi::c_uchar,
    pub Data: [::core::ffi::c_uchar; 8usize],
    pub Reserved: [::core::ffi::c_uchar; 3usize],
}
pub type VCI_CAN_OBJ = _VCI_CAN_OBJ;
pub type PVCI_CAN_OBJ = *mut _VCI_CAN_OBJ;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _VCI_CAN_STATUS {
    pub ErrInterrupt: ::core::ffi::c_uchar,
    pub regMode: ::core::ffi::c_uchar,
    pub regStatus: ::core::ffi::c_uchar,
    pub regALCapture: ::core::ffi::c_uchar,
    pub regECCapture: ::core::ffi::c_uchar,
    pub regEWLimit: ::core::ffi::c_uchar,
    pub regRECounter: ::core::ffi::c_uchar,
    pub regTECounter: ::core::ffi::c_uchar,
    pub Reserved: ::core::ffi::c_uint,
}
pub type VCI_CAN_STATUS = _VCI_CAN_STATUS;
pub type PVCI_CAN_STATUS = *mut _VCI_CAN_STATUS;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _ERR_INFO {
    pub ErrCode: ::core::ffi::c_uint,
    pub Passive_ErrData: [::core::ffi::c_uchar; 3usize],
    pub ArLost_ErrData: ::core::ffi::c_uchar,
}
pub type VCI_ERR_INFO = _ERR_INFO;
pub type PVCI_ERR_INFO = *mut _ERR_INFO;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _INIT_CONFIG {
    pub AccCode: ::core::ffi::c_uint,
    pub AccMask: ::core::ffi::c_uint,
    pub Reserved: ::core::ffi::c_uint,
    pub Filter: ::core::ffi::c_uchar,
    pub Timing0: ::core::ffi::c_uchar,
    pub Timing1: ::core::ffi::c_uchar,
    pub Mode: ::core::ffi::c_uchar,
}
pub type VCI_INIT_CONFIG = _INIT_CONFIG;
pub type PVCI_INIT_CONFIG = *mut _INIT_CONFIG;
extern "C" {
    pub fn VCI_OpenDevice(
        DeviceType: ::core::ffi::c_uint,
        DeviceInd: ::core::ffi::c_uint,
        Reserved: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn VCI_CloseDevice(
        DeviceType: ::core::ffi::c_uint,
        DeviceInd: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn VCI_InitCAN(
        DeviceType: ::core::ffi::c_uint,
        DeviceInd: ::core::ffi::c_uint,
        CANInd: ::core::ffi::c_uint,
        pInitConfig: PVCI_INIT_CONFIG,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn VCI_ReadBoardInfo(
        DeviceType: ::core::ffi::c_uint,
        DeviceInd: ::core::ffi::c_uint,
        pInfo: PVCI_BOARD_INFO,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn VCI_ReadErrInfo(
        DeviceType: ::core::ffi::c_uint,
        DeviceInd: ::core::ffi::c_uint,
        CANInd: ::core::ffi::c_uint,
        pErrInfo: PVCI_ERR_INFO,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn VCI_ReadCANStatus(
        DeviceType: ::core::ffi::c_uint,
        DeviceInd: ::core::ffi::c_uint,
        CANInd: ::core::ffi::c_uint,
        pCANStatus: PVCI_CAN_STATUS,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn VCI_GetReference(
        DeviceType: ::core::ffi::c_uint,
        DeviceInd: ::core::ffi::c_uint,
        CANInd: ::core::ffi::c_uint,
        RefType: ::core::ffi::c_uint,
        pData: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn VCI_SetReference(
        DeviceType: ::core::ffi::c_uint,
        DeviceInd: ::core::ffi::c_uint,
        CANInd: ::core::ffi::c_uint,
        RefType: ::core::ffi::c_uint,
        pData: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn VCI_GetReceiveNum(
        DeviceType: ::core::ffi::c_uint,
        DeviceInd: ::core::ffi::c_uint,
        CANInd: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn VCI_ClearBuffer(
        DeviceType: ::core::ffi::c_uint,
        DeviceInd: ::core::ffi::c_uint,
        CANInd: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn VCI_StartCAN(
        DeviceType: ::core::ffi::c_uint,
        DeviceInd: ::core::ffi::c_uint,
        CANInd: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn VCI_ResetCAN(
        DeviceType: ::core::ffi::c_uint,
        DeviceInd: ::core::ffi::c_uint,
        CANInd: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn VCI_Transmit(
        DeviceType: ::core::ffi::c_uint,
        DeviceInd: ::core::ffi::c_uint,
        CANInd: ::core::ffi::c_uint,
        pSend: PVCI_CAN_OBJ,
        Len: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn VCI_Receive(
        DeviceType: ::core::ffi::c_uint,
        DeviceInd: ::core::ffi::c_uint,
        CANInd: ::core::ffi::c_uint,
        pReceive: PVCI_CAN_OBJ,
        Len: ::core::ffi::c_uint,
        WaitTime: ::core::ffi::c_int,
    ) -> ::core::ffi::c_uint;
}
